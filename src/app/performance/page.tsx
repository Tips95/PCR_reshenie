'use client'

import { useEffect, useState } from 'react'

interface Metrics {
  loadTime: number
  ttfb: number
  domContentLoaded: number
  domComplete: number
  fcp: number
  lcp: number
}

export default function PerformancePage() {
  const [metrics, setMetrics] = useState<Metrics | null>(null)

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (typeof window !== 'undefined') {
      const getMetrics = () => {
        const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming
        const paint = performance.getEntriesByType('paint')
        
        const metrics: Metrics = {
          // –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          loadTime: navigation.loadEventEnd - navigation.loadEventStart,
          // –í—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –±–∞–π—Ç–∞
          ttfb: navigation.responseStart - navigation.requestStart,
          // –í—Ä–µ–º—è –¥–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          domContentLoaded: navigation.domContentLoadedEventEnd - navigation.domContentLoadedEventStart,
          // –í—Ä–µ–º—è –¥–æ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
          domComplete: navigation.domComplete - navigation.fetchStart,
          // –ü–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
          fcp: paint.find(entry => entry.name === 'first-contentful-paint')?.startTime || 0,
          // –ü–µ—Ä–≤–∞—è –∑–Ω–∞—á–∏–º–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
          lcp: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
        }

        setMetrics(metrics)
      }

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (document.readyState === 'complete') {
        getMetrics()
      } else {
        window.addEventListener('load', getMetrics)
      }

      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º LCP
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries()
        const lastEntry = entries[entries.length - 1]
        setMetrics((prev: Metrics | null) => prev ? { ...prev, lcp: lastEntry.startTime } : null)
      })
      observer.observe({ entryTypes: ['largest-contentful-paint'] })

      return () => {
        window.removeEventListener('load', getMetrics)
        observer.disconnect()
      }
    }
  }, [])

  const getScore = (value: number, threshold: number) => {
    if (value <= threshold * 0.5) return 'üü¢ –û—Ç–ª–∏—á–Ω–æ'
    if (value <= threshold) return 'üü° –•–æ—Ä–æ—à–æ'
    return 'üî¥ –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'
  }

  return (
    <div className="min-h-screen p-8 bg-gray-50">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</h1>
        
        {metrics ? (
          <div className="grid md:grid-cols-2 gap-6">
            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold mb-4">–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span>–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏:</span>
                  <span className="font-mono">{metrics.loadTime.toFixed(2)}ms</span>
                </div>
                <div className="flex justify-between">
                  <span>TTFB:</span>
                  <span className="font-mono">{metrics.ttfb.toFixed(2)}ms</span>
                </div>
                <div className="flex justify-between">
                  <span>DOM Content Loaded:</span>
                  <span className="font-mono">{metrics.domContentLoaded.toFixed(2)}ms</span>
                </div>
                <div className="flex justify-between">
                  <span>DOM Complete:</span>
                  <span className="font-mono">{metrics.domComplete.toFixed(2)}ms</span>
                </div>
              </div>
            </div>

            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold mb-4">Core Web Vitals</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span>FCP:</span>
                  <span className="font-mono">{metrics.fcp.toFixed(2)}ms</span>
                </div>
                <div className="flex justify-between">
                  <span>LCP:</span>
                  <span className="font-mono">{metrics.lcp.toFixed(2)}ms</span>
                </div>
                <div className="pt-2 border-t">
                  <div className="text-sm text-gray-600">
                    FCP: {getScore(metrics.fcp, 1800)} (—Ü–µ–ª—å: &lt;1.8s)
                  </div>
                  <div className="text-sm text-gray-600">
                    LCP: {getScore(metrics.lcp, 2500)} (—Ü–µ–ª—å: &lt;2.5s)
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="bg-white p-6 rounded-lg shadow">
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫...</p>
          </div>
        )}

        <div className="mt-8 bg-white p-6 rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</h2>
          <ul className="space-y-2 text-gray-700">
            <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebP/AVIF —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
            <li>‚Ä¢ –í–∫–ª—é—á–∏—Ç–µ —Å–∂–∞—Ç–∏–µ Gzip/Brotli –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ</li>
            <li>‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ CSS –∏ JavaScript</li>
            <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤</li>
            <li>‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</li>
            <li>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</li>
          </ul>
        </div>
      </div>
    </div>
  )
} 